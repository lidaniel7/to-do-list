{"version":3,"sources":["Components/Header.js","Components/ToDoItem.js","Components/InputBox.js","App.js","serviceWorker.js","index.js"],"names":["Header","ToDoItem","state","checked","id","handleChange","bind","event","this","setState","deleteButton","props","className","type","onChange","style","textDecoration","fontStyle","color","name","onClick","Component","InputBox","handleSubmit","onSubmit","placeholder","App","taskList","currentItem","preventDefault","newItem","Date","completed","updatedList","concat","target","reset","value","updateList","filter","item","itemList","map","task","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wNAQeA,MANf,WACI,OACI,+CCkCOC,E,kDAnCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAS,EACTC,GAAI,MAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANV,E,yDASDC,GACTC,KAAKC,SAAS,CACVN,SAAUK,KAAKN,MAAMC,Y,+BAKnB,IACCO,EAAgBF,KAAKG,MAArBD,aAQP,OACI,yBAAKE,UAAU,YACX,2BAAOC,KAAK,WAAWV,QAASK,KAAKN,MAAMC,QAASW,SAAUN,KAAKH,eACnE,uBAAGU,MAAOP,KAAKN,MAAMC,QATR,CACjBa,eAAgB,eAChBC,UAAW,SACXC,MAAO,WAM2C,MAAOV,KAAKG,MAAMQ,MAChE,4BAAQC,QAASV,EAAcN,GAAII,KAAKG,MAAMP,GAAIe,KAAMX,KAAKG,MAAMQ,MAAnE,e,GA9BOE,aCcRC,E,uKAbD,IAAD,EAEgCd,KAAKG,MAAnCN,EAFF,EAEEA,aAAckB,EAFhB,EAEgBA,aAErB,OACI,0BAAMC,SAAUD,GAChB,2BAAOE,YAAY,eAAeX,SAAUT,IAC5C,4C,GARWgB,aCkERK,E,kDA7Db,aAAe,IAAD,8BACZ,gBACKxB,MAAQ,CACXyB,SAAU,GACVC,YAAa,IAEf,EAAKL,aAAe,EAAKA,aAAajB,KAAlB,gBACpB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBARR,E,yDAWDC,GACXA,EAAMsB,iBACN,IAAMC,EAAU,CACd1B,GAAI,IAAI2B,KACRZ,KAAMX,KAAKN,MAAM0B,YACjBI,WAAW,GAEPC,EAAczB,KAAKN,MAAMyB,SAASO,OAAOJ,GAC/CtB,KAAKC,SAAS,CACZkB,SAAUM,EACVL,YAAa,KAEfrB,EAAM4B,OAAOC,U,mCAGF7B,GACXA,EAAMsB,iBACNrB,KAAKC,SAAS,CACZmB,YAAarB,EAAM4B,OAAOE,U,mCAIjB9B,GACXA,EAAMsB,iBACN,IAAMS,EAAa9B,KAAKN,MAAMyB,SAASY,QAAO,SAAAC,GAAI,OAAIA,EAAKrB,OAASZ,EAAM4B,OAAOhB,QACjFX,KAAKC,SAAS,CACZkB,SAAUW,M,+BAIJ,IAAD,OACDG,EAAWjC,KAAKN,MAAMyB,SAASe,KAAI,SAAAC,GAAI,OAC7C,kBAAC,EAAD,CACExB,KAAMwB,EAAKxB,KACXyB,IAAKD,EAAKvC,GACVA,GAAIuC,EAAKvC,GACT4B,UAAWW,EAAKX,UAChBtB,aAAc,EAAKA,kBAGrB,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUW,aAAcf,KAAKe,aAAclB,aAAcG,KAAKH,eAC7DoC,O,GAxDSpB,aCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ed792f6c.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <header>To Do List</header>\n    )\n}\n\nexport default Header","import React, {Component} from 'react';\n\nclass ToDoItem extends Component {\n    constructor() {\n        super()\n        this.state = {\n            checked: false,\n            id: null,\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(event) {\n        this.setState({\n            checked: !this.state.checked\n        })\n    }\n\n\n    render() {\n        const {deleteButton} = this.props;\n\n        const checkedStyle = {\n            textDecoration: \"line-through\",\n            fontStyle: \"italic\",\n            color: \"#cdcdcd\",\n        }\n\n        return (\n            <div className=\"todoitem\">\n                <input type=\"checkbox\" checked={this.state.checked} onChange={this.handleChange}/>\n                <p style={this.state.checked ? checkedStyle : null}>{this.props.name}</p>\n                <button onClick={deleteButton} id={this.props.id} name={this.props.name}>Delete</button>\n            </div>\n          );\n    }\n}\n\nexport default ToDoItem;\n","import React, {Component} from 'react';\n\nclass InputBox extends Component {\n    render() {\n\n        const {handleChange, handleSubmit} = this.props;\n\n        return (\n            <form onSubmit={handleSubmit}>\n            <input placeholder=\"Enter a task\" onChange={handleChange}/>\n            <button>Add</button>\n            </form>\n          );\n    }\n}\n\nexport default InputBox;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header.js';\nimport ToDoItem from './Components/ToDoItem.js';\nimport InputBox from './Components/InputBox.js';\n\nclass App extends Component{\n  constructor() {\n    super()\n    this.state = {\n      taskList: [],\n      currentItem: ''\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.deleteButton = this.deleteButton.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const newItem = {\n      id: new Date(),\n      name: this.state.currentItem,\n      completed: false,\n    }\n    const updatedList = this.state.taskList.concat(newItem);\n    this.setState({\n      taskList: updatedList,\n      currentItem: '',\n    })\n    event.target.reset();\n  }\n\n  handleChange(event) {\n    event.preventDefault();\n    this.setState({\n      currentItem: event.target.value\n    })\n  }\n\n  deleteButton(event) {\n    event.preventDefault();\n    const updateList = this.state.taskList.filter(item => item.name !== event.target.name)\n    this.setState({\n      taskList: updateList,\n    })\n  }\n\n  render() {\n    const itemList = this.state.taskList.map(task => \n    <ToDoItem \n      name={task.name} \n      key={task.id}\n      id={task.id}\n      completed={task.completed}\n      deleteButton={this.deleteButton}\n    />)\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <InputBox handleSubmit={this.handleSubmit} handleChange={this.handleChange}/>\n        {itemList}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// const DATA = [\n//   { id: \"todo-0\", name: \"Math\", completed: false },\n//   { id: \"todo-1\", name: \"Science\", completed: false},\n// ]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}